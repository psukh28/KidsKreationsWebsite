---
// Performance monitoring component
// Tracks Core Web Vitals and other performance metrics
---

<script>
  // Performance monitoring for Core Web Vitals
  (function() {
    'use strict';
    
    // Check if PerformanceObserver is supported
    if (!('PerformanceObserver' in window)) {
      return;
    }

    // Track Largest Contentful Paint (LCP)
    const lcpObserver = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      const lastEntry = entries[entries.length - 1];
      
      // Send LCP data to analytics (replace with your analytics service)
      console.log('LCP:', lastEntry.startTime);
      
      // You can send this to your analytics service
      // sendToAnalytics('LCP', lastEntry.startTime);
    });
    
    lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });

    // Track First Input Delay (FID)
    const fidObserver = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      entries.forEach((entry) => {
        console.log('FID:', entry.processingStart - entry.startTime);
        // sendToAnalytics('FID', entry.processingStart - entry.startTime);
      });
    });
    
    fidObserver.observe({ entryTypes: ['first-input'] });

    // Track Cumulative Layout Shift (CLS)
    let clsValue = 0;
    let clsEntries = [];
    
    const clsObserver = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      entries.forEach((entry) => {
        if (!entry.hadRecentInput) {
          clsValue += entry.value;
          clsEntries.push(entry);
        }
      });
    });
    
    clsObserver.observe({ entryTypes: ['layout-shift'] });

    // Report CLS on page unload
    window.addEventListener('beforeunload', () => {
      console.log('CLS:', clsValue);
      // sendToAnalytics('CLS', clsValue);
    });

    // Track Time to First Byte (TTFB)
    const navigationEntry = performance.getEntriesByType('navigation')[0];
    if (navigationEntry) {
      const ttfb = navigationEntry.responseStart - navigationEntry.requestStart;
      console.log('TTFB:', ttfb);
      // sendToAnalytics('TTFB', ttfb);
    }

    // Track First Contentful Paint (FCP)
    const fcpObserver = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      const firstEntry = entries[0];
      console.log('FCP:', firstEntry.startTime);
      // sendToAnalytics('FCP', firstEntry.startTime);
    });
    
    fcpObserver.observe({ entryTypes: ['first-contentful-paint'] });

    // Track resource loading performance
    const resourceObserver = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      entries.forEach((entry) => {
        if (entry.initiatorType === 'img' && entry.duration > 1000) {
          console.log('Slow image load:', entry.name, entry.duration);
          // sendToAnalytics('slow-image', { url: entry.name, duration: entry.duration });
        }
      });
    });
    
    resourceObserver.observe({ entryTypes: ['resource'] });

    // Track long tasks
    const longTaskObserver = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      entries.forEach((entry) => {
        console.log('Long task detected:', entry.duration);
        // sendToAnalytics('long-task', entry.duration);
      });
    });
    
    longTaskObserver.observe({ entryTypes: ['longtask'] });

    // Helper function to send data to analytics (implement as needed)
    function sendToAnalytics(metric, value) {
      // Example implementation:
      // fetch('/api/analytics', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify({ metric, value, timestamp: Date.now() })
      // });
    }

    // Report performance data when page is hidden
    document.addEventListener('visibilitychange', () => {
      if (document.visibilityState === 'hidden') {
        // Send final performance data
        const perfData = performance.getEntriesByType('navigation')[0];
        if (perfData) {
          console.log('Page Load Time:', perfData.loadEventEnd - perfData.loadEventStart);
          console.log('DOM Content Loaded:', perfData.domContentLoadedEventEnd - perfData.domContentLoadedEventStart);
        }
      }
    });

  })();
</script> 