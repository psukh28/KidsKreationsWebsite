---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import Footer from '../components/Footer.astro';
import { Image } from 'astro:assets';
import { products } from '../data/products';

// Preload critical images for faster navigation
const preloadImages = products.flatMap(product => 
  product.images.slice(0, 2).map(img => img.src)
);
---

<Layout title="Products - Kids Kreations">
  <!-- Preload critical images for faster navigation -->
  {preloadImages.map(src => (
    <link rel="preload" as="image" href={src} />
  ))}
  
  <Navigation />
  
  <main>
    <section class="hero product-hero">
      <div class="container">
        <div class="section-title">
          <h1>Explore Our Infantwear Collection</h1>
          <p>Flexible MOQs, GOTS-certified materials, custom packaging, and export-ready babywear.</p>
        </div>
      </div>
    </section>

    <section class="products">
      <div class="container">
        <div class="products-grid">
          {products.map((product, productIndex) => (
            <article class="product-card" data-orientation={product.orientation} data-slug={product.slug}>
              <div class="product-image-wrapper">
                {product.images && product.images.length > 0 && (
                  <div class="product-gallery">
                    {product.images.map((image, imageIndex) => (
                      <Image 
                        src={image} 
                        alt={`${product.title} - View ${imageIndex + 1}`}
                        class="product-image"
                        loading={productIndex < 3 ? (imageIndex < 2 ? 'eager' : 'lazy') : 'lazy'}
                        decoding="async"
                        style={`display: ${imageIndex === 0 ? 'block' : 'none'}`}
                        width={600}
                        height={450}
                        quality={85}
                        format="webp"
                      />
                    ))}
                    <button class="gallery-nav gallery-prev" aria-label="Previous image">←</button>
                    <button class="gallery-nav gallery-next" aria-label="Next image">→</button>
                    <div class="gallery-dots">
                      {product.images.map((_, imageIndex) => (
                        <button 
                          class="gallery-dot" 
                          aria-label={`View image ${imageIndex + 1}`}
                          data-index={imageIndex}
                        ></button>
                      ))}
                    </div>
                    <button class="zoom-button" aria-label="Zoom image">
                      <i class="fas fa-search-plus"></i>
                    </button>
                    <div class="loading-indicator" style="display: none;">
                      <div class="spinner"></div>
                    </div>
                  </div>
                )}
              </div>
              <div class="product-info">
                <h3 class="product-title">{product.title}</h3>
                <p class="product-description">{product.description}</p>
                <ul class="product-features">
                  {product.features.map(feature => (
                    <li class="feature-item">
                      <i class="fas fa-check"></i>
                      <span>{feature}</span>
                    </li>
                  ))}
                </ul>
                {/* BADGE ROTATOR START */}
                <div class="badge-rotator" id={`badge-rotator-${productIndex}`} data-badges={JSON.stringify(product.badges)}>
                  <span class="badge badge-animated" id={`rotatingBadge-${productIndex}`}></span>
                </div>
                {/* BADGE ROTATOR END */}
              </div>
            </article>
          ))}
        </div>
      </div>
    </section>

    <section class="cta-section">
      <div class="container">
        <div class="cta-content">
          <h2>Interested in Our Products?</h2>
          <p>Contact us to discuss your specific requirements and get a custom quote</p>
          <a href="/contact" class="button button-primary">Request Quote</a>
        </div>
      </div>
    </section>
  </main>

  <!-- Image Modal -->
  <div id="imageModal" class="image-modal" role="dialog" aria-modal="true" aria-label="Product image viewer">
    <div class="modal-content">
      <button class="modal-close" aria-label="Close modal">×</button>
      <button class="modal-nav modal-prev" aria-label="Previous image">←</button>
      <button class="modal-nav modal-next" aria-label="Next image">→</button>
      <div class="modal-image-container">
        <img 
          id="modalImage" 
          src="" 
          alt="Product image"
          class="modal-image"
          loading="lazy"
          decoding="async"
        />
      </div>
    </div>
  </div>

  <Footer />
</Layout>

<style>
  .product-hero {
    background: linear-gradient(to right, var(--primary-light), var(--background));
    padding: var(--spacing-xl) 0;
    text-align: center;
  }

  .section-title {
    max-width: 800px;
    margin: 0 auto;
  }

  .section-title h1 {
    font-family: 'Libre Baskerville', serif;
    font-size: 2.5rem;
    margin-bottom: var(--spacing-sm);
  }

  .products {
    padding: var(--spacing-xl) 0;
    background: var(--background);
  }

  .products-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--spacing-lg);
    max-width: 1500px;
    margin: 0 auto;
  }

  .product-card {
    background: #fff;
    border-radius: 16px;
    overflow: hidden;
    transition: box-shadow 0.3s, transform 0.3s;
    height: 100%;
    min-height: 420px;
    box-shadow: 0 2px 12px rgba(0,0,0,0.04);
    display: flex;
    flex-direction: column;
    animation: fadeIn 0.5s ease-out;
    cursor: pointer;
    position: relative;
    border: 1px solid rgba(0, 0, 0, 0.06);
    padding-bottom: 2.5rem;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .product-card:hover {
    box-shadow: 0 8px 20px rgba(0,0,0,0.08);
    transform: translateY(-4px) scale(1.01);
    background: #fff;
  }

  /* Remove the colored border strips for cleaner look */
  .product-card::before,
  .product-card::after,
  .product-info::before,
  .product-info::after {
    display: none;
  }

  .product-image-wrapper {
    position: relative;
    overflow: hidden;
    background: #f8f8f8;
    aspect-ratio: var(--aspect-ratio);
    margin-bottom: 1rem;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.06);
    transition: box-shadow 0.3s;
  }

  .product-card:hover .product-image-wrapper {
    box-shadow: 0 4px 16px rgba(0,0,0,0.10);
  }

  .product-card[data-orientation="portrait"] {
    --aspect-ratio: 3/4;
  }

  .product-card[data-orientation="landscape"] {
    --aspect-ratio: 4/3;
  }

  .product-gallery {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
    touch-action: pan-y pinch-zoom; /* Allow vertical scrolling but optimize for horizontal swipes */
    cursor: grab;
    transition: transform 0.1s ease;
  }

  .product-gallery:active {
    cursor: grabbing;
  }

  .product-gallery.swiping {
    transform: scale(0.98);
    transition: transform 0.1s ease;
  }

  .product-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 12px;
    transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    user-select: none;
    -webkit-user-select: none;
    -webkit-touch-callout: none;
  }

  .product-card:hover .product-image {
    transform: scale(1.05);
  }

  .loading-indicator {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 30;
  }

  .spinner {
    width: 24px;
    height: 24px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-top: 2px solid var(--primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .product-info {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    flex: 1;
    position: relative;
    align-items: flex-start;
    background: linear-gradient(
  180deg,
  #ffffff 0%,
  #f5fafe 20%,
  #eaf6fd 50%,
  #f5fafe 80%,
  #ffffff 100%
);

   

  }

  .product-title {
    font-family: 'Libre Baskerville', serif;
    font-size: 1.4rem;
    font-weight: 600;
    color: #1a1a1a;
    margin: 0 0 0.25rem 0;
    line-height: 1.3;
    letter-spacing: -0.01em;
    margin-top: -1rem;

  }

  .product-description {
    color: #555;
    font-size: 0.95rem;
    line-height: 1.6;
    margin: 0 0 0.5rem 0;
    min-height: 57px;
  }

  .product-features {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .feature-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 0.9rem;
    color: #555;
    line-height: 1.5;
  }

  .feature-item i {
    color: #059669;
    font-size: 0.8rem;
    width: 16px;
    height: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #ecfdf5;
    border-radius: 50%;
    flex-shrink: 0;
  }

  .feature-more {
    font-size: 0.9rem;
    margin-top: 0.5rem;
    color: #2563eb;
    font-weight: 500;
    cursor: pointer;
    padding: 0.5rem 1rem;
    background: #eff6ff;
    border-radius: 6px;
    border: 1px solid #dbeafe;
    transition: all 0.2s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    width: fit-content;
  }

  .feature-more:hover {
    background: #dbeafe;
    border-color: #93c5fd;
    transform: translateY(-1px);
  }

  .feature-more::after {
    content: '↓';
    font-size: 0.8rem;
    transition: transform 0.2s ease;
  }

  .feature-more:hover::after {
    transform: translateY(2px);
  }

  .product-badges {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    margin-top: auto;
    padding-top: 1rem;
    justify-content: flex-start;
  }

  .badge {
    padding: 0.5rem 1rem;
    border-radius: 8px;
    font-size: 0.85rem;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    white-space: nowrap;
    border: 1px solid transparent;
    transition: all 0.2s ease;
  }

  .badge-blue {
    background: #eff6ff;
    color: #1e40af;
    border-color: #dbeafe;
  }

  .badge-green {
    background: #ecfdf5;
    color: #047857;
    border-color: #a7f3d0;
  }

  .badge-purple {
    background: #f5f3ff;
    color: #5b21b6;
    border-color: #c4b5fd;
  }

  .badge:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .zoom-button {
    position: absolute;
    top: var(--spacing-sm);
    right: var(--spacing-sm);
    background: rgba(255, 255, 255, 0.9);
    border: none;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 20;
    backdrop-filter: blur(4px);
    opacity: 0;
  }

  .product-card:hover .zoom-button {
    opacity: 1;
  }

  .zoom-button:hover {
    background: var(--primary);
    color: white;
    transform: scale(1.1);
  }

  .gallery-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.8);
    border: none;
    width: 28px;
    height: 28px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 14px;
    cursor: pointer;
    color: var(--text-dark);
    transition: all 0.3s ease;
    z-index: 20;
    opacity: 0;
    backdrop-filter: blur(4px);
  }

  .gallery-prev {
    left: 8px;
  }

  .gallery-next {
    right: 8px;
  }

  .product-card:hover .gallery-nav {
    opacity: 1;
  }

  .gallery-nav:hover {
    background: var(--primary);
    color: rgb(255, 255, 255);
    transform: translateY(-50%) scale(1.1);
  }

  .gallery-dots {
    position: absolute;
    bottom: 8px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 4px;
    z-index: 20;
    background: rgba(255, 255, 255, 0.5);
    padding: 4px 8px;
    border-radius: var(--radius-full);
    backdrop-filter: blur(4px);
  }

  .gallery-dot {
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background: rgba(0, 0, 0, 0.3);
    border: none;
    padding: 0;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .gallery-dot.active {
    background: var(--primary);
    transform: scale(1.2);
  }

  @media (max-width: 1200px) {
    .products-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 1.5rem;
    }
  }

  @media (max-width: 768px) {
    .products-grid {
      grid-template-columns: 1fr;
      gap: 1.25rem;
    }

    .product-card {
      max-width: 500px;
      margin: 0 auto;
    }

    .product-info {
      padding: 1.25rem;
      gap: 0.875rem;
      align-items: center;
      text-align: center;
    }

    .product-title {
      font-size: 1.25rem;
    }

    .product-description {
      font-size: 0.9rem;
    }

    .feature-item {
      font-size: 0.85rem;
      gap: 0.625rem;
    }

    .badge-animated {
      font-size: 0.6rem;
      padding: 0.4rem 0.9rem;
      min-width: 70px;
      max-width: 220px;
      white-space: normal;
      text-align: center;
    }

    .gallery-nav {
      display: none;
    }

    /* Add swipe indicator for mobile */
    .product-gallery::after {
      content: '← Swipe →';
      position: absolute;
      bottom: 8px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(0, 0, 0, 0.7);
      color: white;
      padding: 4px 12px;
      border-radius: 12px;
      font-size: 0.75rem;
      opacity: 0;
      transition: opacity 0.3s ease;
      pointer-events: none;
      z-index: 25;
    }

    .product-card:hover .product-gallery::after {
      opacity: 1;
    }

    .product-gallery.show-swipe-hint::after {
      opacity: 1;
    }

    /* Improve touch feedback */
    .product-gallery {
      touch-action: pan-y pinch-zoom;
    }
  }

  @media (max-width: 480px) {
    .product-info {
      padding: 1rem;
    }

    .product-badges {
      gap: 0.5rem;
    }

    .badge-rotator {
      min-height: 24px;
    }

    .badge-animated {
      font-size: 0.75rem;
      padding: 0.3rem 0.7rem;
      min-width: 60px;
      max-width: 100px;
    }
  }

  .image-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(10px);
    z-index: 1000;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .image-modal.active {
    display: flex;
    opacity: 1;
  }

  .modal-content {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--spacing-xl);
  }

  .modal-image-container {
    max-width: 90vw;
    max-height: 90vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-image {
    max-width: 100%;
    max-height: 90vh;
    object-fit: contain;
    border-radius: var(--radius-lg);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  }

  .modal-close {
    position: absolute;
    top: var(--spacing-lg);
    right: var(--spacing-lg);
    background: white;
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    cursor: pointer;
    color: var(--text-dark);
    transition: all 0.3s ease;
    z-index: 1001;
  }

  .modal-close:hover {
    background: var(--primary);
    color: white;
    transform: scale(1.1);
  }

  .modal-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.9);
    border: none;
    width: 48px;
    height: 48px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    cursor: pointer;
    color: var(--text-dark);
    transition: all 0.3s ease;
    z-index: 1001;
    backdrop-filter: blur(4px);
  }

  .modal-prev {
    left: var(--spacing-lg);
  }

  .modal-next {
    right: var(--spacing-lg);
  }

  .modal-nav:hover {
    background: var(--primary);
    color: white;
    transform: translateY(-50%) scale(1.1);
  }

  .badge-rotator {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    margin-top: 1rem;
    margin-bottom: 0.5rem;
    min-height: 32px;
    position: static;
  }
  .badge-animated {
    display: inline-block;
    padding: 0.5rem 1.1rem;
    border-radius: 9999px;
    background: #ecfdf5;
    color: #047857;
    font-size: 0.9rem;
    font-weight: 600;
    opacity: 1;
    transition: opacity 0.4s;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    min-width: 90px;
    max-width: 280px;
    text-align: center;
    box-shadow: 0 2px 6px rgba(0,0,0,0.06);
  }
  .badge-animated.fade-out { opacity: 0; }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.badge-rotator').forEach(rotator => {
      const badgeEl = rotator.querySelector('.badge-animated');
      let badges;
      try {
        badges = JSON.parse(rotator.getAttribute('data-badges'));
      } catch { badges = []; }
      if (!badgeEl || !badges.length) return;
      let current = 0;
      function showBadge(idx) {
        badgeEl.classList.add('fade-out');
        setTimeout(() => {
          badgeEl.textContent = badges[idx];
          badgeEl.classList.remove('fade-out');
        }, 400);
      }
      setInterval(() => {
        current = (current + 1) % badges.length;
        showBadge(current);
      }, 2500);
      // Initialize
      badgeEl.textContent = badges[0];
    });
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize image galleries with optimized loading
    document.querySelectorAll<HTMLElement>('.product-gallery').forEach(gallery => {
      const images = Array.from(gallery.querySelectorAll<HTMLImageElement>('.product-image'));
      const dots = Array.from(gallery.querySelectorAll<HTMLButtonElement>('.gallery-dot'));
      const prevBtn = gallery.querySelector<HTMLButtonElement>('.gallery-prev');
      const nextBtn = gallery.querySelector<HTMLButtonElement>('.gallery-next');
      const zoomBtn = gallery.querySelector<HTMLButtonElement>('.zoom-button');
      const loadingIndicator = gallery.querySelector<HTMLElement>('.loading-indicator');
      let currentIndex = 0;

      // Swipe functionality for mobile
      let touchStartX = 0;
      let touchStartY = 0;
      let touchEndX = 0;
      let touchEndY = 0;
      let isSwiping = false;
      let touchStartTime = 0;

      gallery.addEventListener('touchstart', (event: TouchEvent) => {
        touchStartX = event.changedTouches[0].screenX;
        touchStartY = event.changedTouches[0].screenY;
        touchStartTime = Date.now();
        isSwiping = false;
      }, { passive: false });

      gallery.addEventListener('touchmove', (event: TouchEvent) => {
        if (!touchStartX || !touchStartY) return;
        
        const currentX = event.changedTouches[0].screenX;
        const currentY = event.changedTouches[0].screenY;
        const deltaX = Math.abs(currentX - touchStartX);
        const deltaY = Math.abs(currentY - touchStartY);
        
        // If we've moved horizontally more than vertically, prevent scroll
        if (deltaX > deltaY && deltaX > 10) {
          event.preventDefault();
          isSwiping = true;
          gallery.classList.add('swiping');
        }
      }, { passive: false });

      gallery.addEventListener('touchend', (event: TouchEvent) => {
        if (!touchStartX || !touchStartY) return;
        
        const touchEndTime = Date.now();
        const touchDuration = touchEndTime - touchStartTime;
        
        touchEndX = event.changedTouches[0].screenX;
        touchEndY = event.changedTouches[0].screenY;
        
        // Remove swiping class
        gallery.classList.remove('swiping');
        
        // Only process swipe if it was a quick gesture (less than 500ms) and we detected swiping
        if (isSwiping && touchDuration < 500) {
          event.preventDefault();
          handleSwipe();
        }
        
        // Reset touch state
        touchStartX = 0;
        touchStartY = 0;
        touchEndX = 0;
        touchEndY = 0;
        touchStartTime = 0;
        isSwiping = false;
      }, { passive: false });

      function handleSwipe() {
        const swipeThreshold = 80; // Increased threshold for more reliable detection
        const deltaX = touchEndX - touchStartX;
        const deltaY = touchEndY - touchStartY;

        // Check if it's a horizontal swipe and not a vertical scroll
        if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > swipeThreshold) {
          if (deltaX < -swipeThreshold) {
            // Swiped left - next image
            const newIndex = (currentIndex + 1) % images.length;
            showImage(newIndex);
          } else if (deltaX > swipeThreshold) {
            // Swiped right - previous image
            const newIndex = (currentIndex - 1 + images.length) % images.length;
            showImage(newIndex);
          }
        }
      }

      // Preload next and previous images for faster navigation
      function preloadAdjacentImages() {
        const nextIndex = (currentIndex + 1) % images.length;
        const prevIndex = (currentIndex - 1 + images.length) % images.length;
        
        // Preload next image
        if (images[nextIndex] && !images[nextIndex].complete) {
          const nextImg = new window.Image();
          nextImg.src = images[nextIndex].src;
        }
        
        // Preload previous image
        if (images[prevIndex] && !images[prevIndex].complete) {
          const prevImg = new window.Image();
          prevImg.src = images[prevIndex].src;
        }
      }

      function showImage(index: number) {
        // Show loading indicator
        if (loadingIndicator) {
          loadingIndicator.style.display = 'flex';
        }

        // Hide all images
        images.forEach(img => {
          img.style.display = 'none';
          img.style.opacity = '0';
        });
        
        // Update dots
        dots.forEach(dot => {
          dot.classList.remove('active');
        });
        
        // Show target image
        const targetImage = images[index];
        if (!targetImage) return;

        targetImage.style.display = 'block';
        
        // Check if image is already loaded
        if (targetImage.complete && targetImage.naturalHeight !== 0) {
          targetImage.style.opacity = '1';
          if (loadingIndicator) {
            loadingIndicator.style.display = 'none';
          }
        } else {
          // Wait for image to load
          targetImage.onload = () => {
            targetImage.style.opacity = '1';
            if (loadingIndicator) {
              loadingIndicator.style.display = 'none';
            }
          };
          
          // Fallback in case onload doesn't fire
          setTimeout(() => {
            targetImage.style.opacity = '1';
            if (loadingIndicator) {
              loadingIndicator.style.display = 'none';
            }
          }, 1000);
        }
        
        if (dots[index]) {
          dots[index].classList.add('active');
        }
        currentIndex = index;
        
        // Preload adjacent images for next navigation
        setTimeout(preloadAdjacentImages, 100);
      }

      if (prevBtn) {
        prevBtn.onclick = (e: MouseEvent) => {
          e.preventDefault();
          e.stopPropagation();
          const newIndex = (currentIndex - 1 + images.length) % images.length;
          showImage(newIndex);
        };
      }

      if (nextBtn) {
        nextBtn.onclick = (e: MouseEvent) => {
          e.preventDefault();
          e.stopPropagation();
          const newIndex = (currentIndex + 1) % images.length;
          showImage(newIndex);
        };
      }

      dots.forEach((dot, index) => {
        dot.onclick = (e: MouseEvent) => {
          e.preventDefault();
          e.stopPropagation();
          showImage(index);
        };
      });

      if (zoomBtn) {
        zoomBtn.onclick = (e: MouseEvent) => {
          e.preventDefault();
          e.stopPropagation();
          if (images[currentIndex]) {
            openModal(images[currentIndex].src, gallery as HTMLElement, currentIndex);
          }
        };
      }

      // Initialize first image
      showImage(0);
      
      // Show swipe indicator briefly on mobile
      if (window.innerWidth <= 768) {
        setTimeout(() => {
          gallery.classList.add('show-swipe-hint');
          setTimeout(() => {
            gallery.classList.remove('show-swipe-hint');
          }, 2000);
        }, 1000);
      }
    });

    // Make product cards clickable
    document.querySelectorAll<HTMLElement>('.product-card').forEach(card => {
      card.addEventListener('click', (e) => {
        // Don't navigate if a button or an element within the gallery controls was clicked
        if ((e.target as HTMLElement).closest('button')) {
          return;
        }

        const slug = card.dataset.slug;
        if (slug) {
          window.location.href = `/products/${slug}`;
        }
      });
    });

    // Modal functionality
    const modal = document.getElementById('imageModal');
    const modalImg = document.getElementById('modalImage') as HTMLImageElement | null;
    const closeBtn = document.querySelector('.modal-close');
    const modalPrevBtn = document.querySelector('.modal-prev');
    const modalNextBtn = document.querySelector('.modal-next');
    
    let currentGallery: HTMLElement | null = null;
    let currentImageIndex = 0;
    
    function openModal(imageSrc: string, gallery: HTMLElement, index: number) {
      if (!modal || !modalImg) return;
      modalImg.src = imageSrc;
      modal.classList.add('active');
      document.body.style.overflow = 'hidden';
      currentGallery = gallery;
      currentImageIndex = index;
      updateNavigationButtons();
      
      // Trap focus within modal
      modal.focus();
    }
    
    function closeModal() {
      if (!modal) return;
      modal.classList.remove('active');
      document.body.style.overflow = '';
      currentGallery = null;
    }

    function showNextImage() {
      if (!currentGallery || !modalImg) return;
      const images = currentGallery.querySelectorAll<HTMLImageElement>('.product-image');
      currentImageIndex = (currentImageIndex + 1) % images.length;
      if (images[currentImageIndex]) {
        modalImg.src = images[currentImageIndex].src;
      }
      updateNavigationButtons();
    }

    function showPrevImage() {
      if (!currentGallery || !modalImg) return;
      const images = currentGallery.querySelectorAll<HTMLImageElement>('.product-image');
      currentImageIndex = (currentImageIndex - 1 + images.length) % images.length;
      if (images[currentImageIndex]) {
        modalImg.src = images[currentImageIndex].src;
      }
      updateNavigationButtons();
    }

    function updateNavigationButtons() {
      if (!currentGallery || !modalPrevBtn || !modalNextBtn) return;
      const images = currentGallery.querySelectorAll('.product-image');
      (modalPrevBtn as HTMLElement).style.display = images.length > 1 ? 'flex' : 'none';
      (modalNextBtn as HTMLElement).style.display = images.length > 1 ? 'flex' : 'none';
    }
    
    if (closeBtn) closeBtn.addEventListener('click', closeModal);
    
    if (modal) {
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          closeModal();
        }
      });
    }
    
    if (modalPrevBtn) modalPrevBtn.addEventListener('click', showPrevImage);
    if (modalNextBtn) modalNextBtn.addEventListener('click', showNextImage);
    
    document.addEventListener('keydown', (e) => {
      if (!modal || !modal.classList.contains('active')) return;
      
      switch(e.key) {
        case 'Escape':
          closeModal();
          break;
        case 'ArrowLeft':
          showPrevImage();
          break;
        case 'ArrowRight':
          showNextImage();
          break;
      }
    });
  });
</script> 